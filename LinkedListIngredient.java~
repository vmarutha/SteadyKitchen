//Equals sign '=' is equivalent to pointing to a node.
public class LinkedListIngredient
{
  Node header;
  
  public LinkedListIngredient()
  {
    header = null;
  }
  
  public void addAtFront(Ingredient info)
  {
    if (header == null)
    {
      header = new Node(info, null);
    }
    else
    {
      Node temp = header; // temp gets the value of the address that header is pointing to. AKA the first node
      header = new Node(info, temp); // header now points to a new node with data info and pointer temp which WAS the first node
    }
  }
  
  public void deleteAtFront()
  {
    if (header != null && header.getNext() != null)
    {
      header = header.getNext(); 
      //header has null data but some reference point. The get symbol '=' changes the reference point. header.getNext() returns the second node in the list
    }
  }
  
  public void push(Ingredient a) // For stacks, where a node of data a is inserted at the end of the list
  {
    if (header == null)
    {
      header = new Node(a, null); // header points to the new node
    }
    else
    {
      Node current = header;
      while (current.getNext() != null) // second node doesn't equal to null
      {
        current = current.getNext(); // second node gets third node...third node gets fourth node...until the LAST NODE (current.getNext() == null)
      }
      current.setNext(new Node(a, null)); //Set reference for last node to the new node
    }
  }
  
  public void pop() // For stacks, where a node at the end of the list is deleted
  {
    if (header.getNext() == null) // if there is not second node AKA one node in the list
    {
      header = null; // header points to nothing
    }
    else if (header.getNext() != null) //If there is a second node AKA more than two nodes in the list 
    {
      header = header.getNext(); // header points to the second node in the list.
    }
  }
  
  public void queue(Ingredient b) // For queues, where a node of data b is added at the end of the list. SAME AS PUSH
  {
    push(b);
  }
  
  public void dequeue() // For queues, where a node at the front is deleted. SAME AS deleteAtFront()
  {
    deleteAtFront();
  }
  
  public String printData()
  {
    Node current = header;
    String s = "";
    while (current!= null)
    {
      s = s + " " + current.getData();
      current = current.getNext();
    }
    return s;
  }
  
}